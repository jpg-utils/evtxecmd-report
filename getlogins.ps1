#Get-loginstats.ps1
#Description: A powershell script designed to make auditing standalone workstation logs easier

#How to use- have the $CSVfile variable point to your CSV generated by evtxecmd. run the script

#Script will query the CSV and generate a report of most likely places to find evil,
#while filtering out noise generated by Windows itself

#CSV must have the following event logs from Security and System to show all results:
#4624,4634,4625,4672,4648,4799,4720,4732,4724,1102,7045,104,4722



$csvfile = "C:\temp\20250816170116_EvtxECmd_Output.csv" #filepath to your log file

$logins = Get-Content  $csvfile `
    | ConvertFrom-Csv


$output = @"
<!doctype html>
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <title>Standalone Login Audit</title>
    <style>
    body {text-align: center;}
    table {margin-left: auto; margin-right:auto;}
    td {padding-left: 8px; padding-right: 8px;}
    </style>
  </head>
  <body>
  <h1>$(HOSTNAME) log audit</h1>
"@

#time user logged in
$output = $output + ($logins `
    | where eventid -eq 4624 `
    | where payloaddata2 -eq "LogonType 10" `
        | select timecreated, @{Name = "User Logging In";expression = {$psitem.payloaddata1 -replace "Target: ",""}} `
        |ConvertTo-Html -As Table -Fragment -PreContent "<h2>Desktop Logon Time</h2>" -PostContent "<br><br>")

#time user logged out
$output = $output + ($logins `
    | where eventid -eq 4634 `
    | where payloaddata1 -match (HOSTNAME.EXE) `
        | select timecreated, @{Name = "User Logging Out";expression = {$psitem.payloaddata1 -replace "Target: ",""}} `
        | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Desktop Logout Times</h2>" -PostContent "<br><br>")

#times of failed login
$output =$output + ($logins `
    | where eventid -eq 4625 `
        | select timecreated, username, @{Name ="Logon Failure Reason";expression={$psitem.payloaddata4 -replace "FailureReason2: ",""}} `
        | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Failed Authentication</h2>" -PostContent "<br><br>")

#access of network share or powershell remoting
$output = $output + ($logins `
    | where eventid -eq 4624 `
    | where payloaddata2 -eq "LogonType 3" `
        | select timecreated, @{Name = "Logon User";expression = {$psitem.payloaddata1 -replace "Target: ",""}} `
        | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Powershell Logon or Network Share Access</h2>" -PostContent "<br><br>")

#admin priv logon
$output = $output + ($logins `
    | where eventid -eq 4672 `
    | where username -match "^($(HOSTNAME.EXE))"  `
        | select timecreated, @{Name = "Logon User";expression = {$psitem.username -replace "\([^)]*\)",""}} `
        | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Account Logins with Local Admin Rights</h2>" -PostContent "<br><br>")

#explicit use of another accounts credentials
$output = $output + ($logins `
    | where eventid -eq 4648 `
    | where username -match "^($(HOSTNAME.EXE))" `
    | select timecreated, @{Name = "Logged In User";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "Explicit Credentials Used";expression = {$psitem.payloaddata1 -replace "\([^)]*\)",""}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Use of Alternate Credentials</h2>" -PostContent "<br><br>")


#enumeration of security groups -logs present are using OS accounts, hence empty field
$output = $output + ($logins `
    | where eventid -eq 4799 `
    | where username -match "^($(HOSTNAME.EXE))"  `
    | where payloaddata3 -match "powershell|wmic|cmd" `
    | select timecreated, @{Name = "logged in user";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "process";expression = {$psitem.payloaddata3}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>User Looked for Security groups</h2>" -PostContent "<br><br>")


#4720- account created
$output = $output + ($logins `
    | where eventid -eq 4720 `
    | select timecreated, @{Name = "Account Made By";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "New Account";expression = {$psitem.payloaddata1 -replace "Target: ",""}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Accounts made</h2>" -PostContent "<br><br>")


#4722- account enabled- missing because of evtxecmd filter
$output = $output + ($logins `
    | where eventid -eq 4722 `
    | select timecreated, @{Name = "Account Enabled By";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "Account Enabled";expression = {$psitem.payloaddata1 -replace "Target: ",""}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Accounts enabled</h2>" -PostContent "<br><br>")


#4732- user added to local security group
$output = $output + ($logins `
    | where eventid -eq 4732 `
    | select timecreated, @{Name = "Admin Added By";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "Sid of new admin account";expression = {$psitem.payloaddata4 -replace "MemberSid: ",""}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Accounts granted Admin</h2>" -PostContent "<br><br>")

#4724- password reset by somebody else
$output = $output + ($logins `
    | where eventid -eq 4724 `
    | select timecreated, @{Name = "Password reset By";expression = {$psitem.username -replace "\([^)]*\)",""}}, `
        @{Name = "Account With Reset Password";expression = {$psitem.payloaddata1 -replace "Target: ",""}}`
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Password set by someone other than User</h2>" -PostContent "<br><br>")


#1102- security log cleared -EMPTY- check log
$output = $output + ($logins `
    | where eventid -eq 1102 `
    | select timecreated, @{Name = "Security Log Cleared By";expression = {$psitem.username -replace "\([^)]*\)",""}} `
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Clearing of Security Log</h2>" -PostContent "<br><br>")

#104- system log cleared
$output = $output + ($logins `
    | where eventid -eq 104 `
    | select timecreated, @{Name = "System Log Cleared By";expression = {$psitem.username -replace "\([^)]*\)",""}} `
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>Clearing of System Log</h2>" -PostContent "<br><br>")

#system 7045- new service created- mention 4697 made a little more useless in windows 10 due to per user services
$output = $output + ($logins `
    | where eventid -eq 7045 `
    | select timecreated, @{Name = "New Service Created by";expression = {$psitem.userid -replace "\([^)]*\)",""}}, `
        @{Name = "Service Name";expression = {$psitem.payloaddata1 -replace "Name: ",""}} `
    | ConvertTo-Html -as Table -Fragment  -PreContent "<h2>New Service Creation</h2>" -PostContent "<br><br></body>")

#Tasks scheduled 4698 enabled 4700 or deleted 4699?
#services -change to start type 7040, installed 4697
#106-scheduled task created
#140- scheduled task updated
#powershell transcript logs

$output | Out-File ~\Documents\report.html


Invoke-Item ~\Documents\report.html

